// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using MusicAPIMVC.Data;

#nullable disable

namespace MusicAPIMVC.Migrations
{
    [DbContext(typeof(MusicDBAccess))]
    partial class MusicDBAccessModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MusicAPIMVC.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("RealeaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            RealeaseYear = 2013,
                            Title = "Sadnecessary"
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 2,
                            RealeaseYear = 2016,
                            Title = "The Divine Feminine"
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = 3,
                            RealeaseYear = 1967,
                            Title = "The Doors"
                        },
                        new
                        {
                            Id = 4,
                            ArtistId = 4,
                            RealeaseYear = 2019,
                            Title = "IGOR"
                        },
                        new
                        {
                            Id = 5,
                            ArtistId = 5,
                            RealeaseYear = 1956,
                            Title = "Chet Baker Sings"
                        });
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StageName = "Milky Chance"
                        },
                        new
                        {
                            Id = 2,
                            StageName = "Mac Miller"
                        },
                        new
                        {
                            Id = 3,
                            StageName = "The Doors"
                        },
                        new
                        {
                            Id = 4,
                            StageName = "Tyler, The Creator"
                        },
                        new
                        {
                            Id = 5,
                            StageName = "Chet Baker"
                        });
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rap"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "R&B"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jazz"
                        });
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.PlaylistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceInPlaylist")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 1,
                            GenreId = 2,
                            Length = new TimeSpan(0, 0, 5, 13, 0),
                            Name = "Stolen Dance"
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 2,
                            GenreId = 1,
                            Length = new TimeSpan(0, 0, 8, 0, 0),
                            Name = "Cinderella"
                        },
                        new
                        {
                            Id = 3,
                            AlbumId = 3,
                            GenreId = 3,
                            Length = new TimeSpan(0, 0, 2, 25, 0),
                            Name = "Break on through (on the other side)"
                        },
                        new
                        {
                            Id = 4,
                            AlbumId = 4,
                            GenreId = 4,
                            Length = new TimeSpan(0, 0, 6, 15, 0),
                            Name = "GONE GONE / THANK YOU"
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 5,
                            GenreId = 5,
                            Length = new TimeSpan(0, 0, 3, 3, 0),
                            Name = "That Old Feeling"
                        });
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Album", b =>
                {
                    b.HasOne("MusicAPIMVC.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.PlaylistItem", b =>
                {
                    b.HasOne("MusicAPIMVC.Models.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicAPIMVC.Models.Song", "Song")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Song", b =>
                {
                    b.HasOne("MusicAPIMVC.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicAPIMVC.Models.Genre", "Genre")
                        .WithMany("AllSongs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Genre", b =>
                {
                    b.Navigation("AllSongs");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("MusicAPIMVC.Models.Song", b =>
                {
                    b.Navigation("PlaylistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
